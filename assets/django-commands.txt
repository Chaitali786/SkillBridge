
!!!!! While installing miniconda select the 'add path' option, if you don't choose it will not work correctly.

1- Then open the Anaconda Prompt and create new environment with this code:
conda create - n <envName>

2- After creating the environment activate it with this code:
conda activate <envName>

3- If you want to deacticate it : 
conda deactivate <envName>

4- To see the environments : 
conda info --envs

5- In a regular Powershell prompt check if conda is working, and update to latest version:
conda update conda
conda --version

6- Setup conda for Powershell using the following command:
conda init powershell

7- To install django: 
pip install django and see the list of packages:
pip list

8- To create a new Django Project:
django-admin startproject 'ProjectName'

8.1- Configure Settings
Navigate into your project directory and open the settings.py file within your project folder. 

INSTALLED_APPS = [
    'firstApp',
     ...,
]

TEMPLATES = [
{
'DIRS': ['templates']
}]

8.2- Create a Django App
Inside your Django project, you can create one or more apps. Apps are components of a Django project that handle specific functionality. To create an app, navigate into your project directory and run:

python manage.py startapp app_name

9- Step 6: Create a Superuser (Optional)
If you plan to use Django's admin interface, you can create a superuser with the following command:

python manage.py createsuperuser

10- Define the model at models.py
Navigate to the app directory where you want to create the model (if you haven't created an app yet, refer to Step 3 in the previous instructions to create one). Then, open the models.py file inside the app directory and define the User model like this:

class User(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

11- Run Migrations
Django uses migrations to manage database schema changes. Run the following command to apply migrations:

python manage.py makemigrations
python manage.py migrate

11.1- Confirm Migration
Check Migration Status:python manage.py showmigrations
Check Models in Django Shell:python manage.py shell
Once in the shell, you can import your models and query them to verify that they exist in the database:
from blog.models import Post
Post.objects.all()


12- Admin Interface (Optional)
If you want to manage User objects through Django's admin interface, you can register the User model in the admin.py file of your app:

	from django.contrib import admin
	from .models import User

	admin.site.register(User)

13- To run web app server:
cd Project> python manage.py runserver



14- To populate your database with fake User data, you can use a Python library called Faker. Here's a script that you can create to generate and save fake User objects to your database:
First, install the Faker library if you haven't already:

pip install faker


15- At the project directory create a Python script, let's name it populate_users.py, and add configure it with codes.
Run the script using Python:

python populate_posts.py

#populate_posts.py
import os
import django
from faker import Faker

# Setup up Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myblogproject.settings")
django.setup()

from blog.models import Post

fake = Faker()

# Generate some dummy post data
for _ in range(10):  # Generate 10 posts (adjust as needed)

    # Check Faker version (optional)
    if hasattr(fake, 'generate'):
        title = fake.generate('sentence')  # Use generate for newer Faker
    else:
        title = fake.sentence(ext_word_list=None)  # Use sentence for older Faker

    content = fake.paragraphs(nb=3, ext_word_list=None)  # Keep paragraphs as is

    # Create a new Post object and save it
    post = Post.objects.create(title=title, content='\n'.join(content))

# 'post' now holds the created Post object (no need for 'posts' list)
print(f"Created Post: {post.title}")  # Access title attribute


16- How to add img and css file from static files:
<img src="{% static 'images/Django.jpg' %}" alt="">
<link rel="stylesheet" href="{% static 'css/mystyle.css' %}">


Dont Forget to Add

- If you use static file like css, you should import this code to settings.py
STATIC_DIR = os.path.join(BASE_DIR, 'static')
and check the actual page, if there is no. add below codes:
STATIC_URL = '/static/'
STATICFILES_DIRS = [
STATIC_DIR,
]

- Top of the html file never forget to add this:
{% load staticfiles %}
